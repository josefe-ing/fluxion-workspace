#!/usr/bin/env python3
"""
Verificador de L√≠mites Hist√≥ricos - Fluxion AI
Identifica el l√≠mite real de datos hist√≥ricos disponibles para cada tienda
"""

import json
import duckdb
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Tuple
import sys

# Agregar el directorio core al path
sys.path.append(str(Path(__file__).parent / 'etl' / 'core'))

DB_PATH = Path(__file__).parent / 'data' / 'fluxion_production.db'
CONFIG_PATH = Path(__file__).parent / 'config_historico_tiendas.json'

# Colores
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
CYAN = '\033[96m'
BOLD = '\033[1m'
RESET = '\033[0m'

def obtener_fechas_actuales() -> Dict[str, Tuple[str, str]]:
    """Obtiene las fechas m√≠nimas y m√°ximas de cada tienda en la BD"""
    conn = duckdb.connect(str(DB_PATH), read_only=True)

    query = """
    SELECT
        ubicacion_id,
        MIN(fecha) as fecha_min,
        MAX(fecha) as fecha_max
    FROM ventas_raw
    WHERE ubicacion_id LIKE 'tienda_%'
    GROUP BY ubicacion_id
    ORDER BY ubicacion_id
    """

    resultado = conn.execute(query).fetchall()
    conn.close()

    fechas = {}
    for ubicacion_id, fecha_min, fecha_max in resultado:
        fechas[ubicacion_id] = (fecha_min, fecha_max)

    return fechas

def identificar_grupos_historicos(fechas: Dict[str, Tuple[str, str]]) -> Dict[str, List[str]]:
    """Agrupa tiendas por fecha de inicio (posible l√≠mite hist√≥rico com√∫n)"""
    grupos = {}

    for tienda_id, (fecha_min, fecha_max) in fechas.items():
        if fecha_min not in grupos:
            grupos[fecha_min] = []
        grupos[fecha_min].append(tienda_id)

    return grupos

def verificar_limite_historico_grupo(tienda_referencia: str, fecha_actual_min: str) -> bool:
    """
    Verifica si hay datos antes de la fecha m√≠nima actual.
    Intenta buscar datos 30 d√≠as antes de la fecha m√≠nima conocida.

    Returns:
        True si NO hay datos anteriores (l√≠mite confirmado)
        False si S√ç hay datos anteriores (falta hist√≥rico)
    """
    from core.extractor_ventas import VentasExtractor
    from core.tiendas_config import TIENDAS_CONFIG

    if tienda_referencia not in TIENDAS_CONFIG:
        return False

    config = TIENDAS_CONFIG[tienda_referencia]

    # Intentar buscar datos 30 d√≠as antes
    fecha_min_dt = datetime.strptime(fecha_actual_min, '%Y-%m-%d')
    fecha_buscar_inicio = (fecha_min_dt - timedelta(days=30)).date()
    fecha_buscar_fin = (fecha_min_dt - timedelta(days=1)).date()

    print(f"  üîç Verificando {tienda_referencia}: buscando datos entre {fecha_buscar_inicio} y {fecha_buscar_fin}...")

    try:
        extractor = VentasExtractor(
            server_ip=config.server_ip,
            port=config.port,
            database=config.database,
            username=config.username,
            password=config.password
        )

        resultado = extractor.extraer_ventas(
            fecha_inicio=fecha_buscar_inicio,
            fecha_fin=fecha_buscar_fin,
            limite=100  # Solo necesitamos saber si hay alg√∫n dato
        )

        if resultado['success'] and resultado['total_registros'] > 0:
            print(f"  {YELLOW}‚ö†Ô∏è  Encontrados {resultado['total_registros']} registros anteriores!{RESET}")
            return False
        else:
            print(f"  {GREEN}‚úì Sin datos anteriores - L√≠mite confirmado{RESET}")
            return True

    except Exception as e:
        print(f"  {RED}‚ùå Error verificando: {str(e)}{RESET}")
        return False

def generar_reporte():
    """Genera reporte de l√≠mites hist√≥ricos"""

    print(f'{CYAN}{BOLD}')
    print('=' * 80)
    print('  VERIFICACI√ìN DE L√çMITES HIST√ìRICOS - FLUXION AI')
    print('  Identificando el m√°ximo hist√≥rico disponible por tienda')
    print(f'  Fecha: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
    print('=' * 80)
    print(RESET)

    # 1. Obtener fechas actuales de la BD
    print(f'{BOLD}üìä PASO 1: Analizando fechas en la base de datos{RESET}')
    fechas = obtener_fechas_actuales()

    print(f'\n  Total tiendas con datos: {len(fechas)}')
    print()

    # 2. Agrupar por fecha de inicio
    print(f'{BOLD}üìä PASO 2: Agrupando tiendas por fecha de inicio{RESET}\n')
    grupos = identificar_grupos_historicos(fechas)

    for fecha_inicio in sorted(grupos.keys()):
        tiendas = grupos[fecha_inicio]
        print(f'  üìÖ {fecha_inicio}: {len(tiendas)} tiendas')
        print(f'     {", ".join(sorted(tiendas))}')
    print()

    # 3. Identificar grupos candidatos a l√≠mite hist√≥rico
    print(f'{BOLD}üìä PASO 3: Identificando candidatos a l√≠mite hist√≥rico{RESET}\n')

    candidatos_confirmados = {}

    for fecha_inicio in sorted(grupos.keys()):
        tiendas = grupos[fecha_inicio]

        # Si hay 2 o m√°s tiendas con la misma fecha, es probable que sea el l√≠mite
        if len(tiendas) >= 2:
            print(f'\n{CYAN}üîç Grupo: {fecha_inicio} ({len(tiendas)} tiendas){RESET}')
            print(f'   Tiendas: {", ".join(sorted(tiendas))}')
            print(f'   {BOLD}Probable l√≠mite hist√≥rico com√∫n{RESET}\n')

            # Verificar con una tienda del grupo
            tienda_referencia = sorted(tiendas)[0]
            es_limite = verificar_limite_historico_grupo(tienda_referencia, fecha_inicio)

            if es_limite:
                candidatos_confirmados[fecha_inicio] = {
                    'tiendas': tiendas,
                    'verificado': True
                }
                print(f'   {GREEN}{BOLD}‚úì‚úì L√çMITE HIST√ìRICO CONFIRMADO para este grupo{RESET}')
            else:
                print(f'   {YELLOW}‚ö†Ô∏è  Posible hist√≥rico incompleto - hay datos anteriores{RESET}')
        else:
            # Tienda √∫nica con esta fecha - caso especial
            tienda = tiendas[0]
            print(f'\n{YELLOW}üìç Tienda √∫nica: {tienda} - {fecha_inicio}{RESET}')
            print(f'   Verificaci√≥n manual recomendada')

    print()

    # 4. Mostrar resumen
    print(f'{CYAN}{BOLD}')
    print('=' * 80)
    print('  RESUMEN DE L√çMITES HIST√ìRICOS CONFIRMADOS')
    print('=' * 80)
    print(RESET)

    if candidatos_confirmados:
        for fecha_inicio, info in sorted(candidatos_confirmados.items()):
            tiendas = info['tiendas']
            print(f'\n{GREEN}{BOLD}‚úì L√≠mite: {fecha_inicio}{RESET}')
            print(f'  Tiendas ({len(tiendas)}): {", ".join(sorted(tiendas))}')
            print(f'  {GREEN}Estas tiendas YA tienen su m√°ximo hist√≥rico disponible{RESET}')
    else:
        print(f'\n{YELLOW}No se identificaron l√≠mites hist√≥ricos confirmados autom√°ticamente{RESET}')

    print()

    # 5. Sugerir actualizaci√≥n del config
    if candidatos_confirmados:
        print(f'{BOLD}üìù PASO 4: Actualizar configuraci√≥n{RESET}\n')

        # Cargar config actual
        if CONFIG_PATH.exists():
            with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
                config = json.load(f)
        else:
            config = {'tiendas': {}}

        cambios = []

        for fecha_inicio, info in candidatos_confirmados.items():
            for tienda_id in info['tiendas']:
                if tienda_id in config.get('tiendas', {}):
                    config_actual = config['tiendas'][tienda_id]

                    # Solo actualizar si la fecha es igual o anterior
                    fecha_config = config_actual.get('fecha_inicio_historico')

                    if fecha_config != fecha_inicio:
                        cambios.append({
                            'tienda': tienda_id,
                            'fecha_anterior': fecha_config,
                            'fecha_nueva': fecha_inicio,
                            'accion': 'actualizar'
                        })

                        config['tiendas'][tienda_id]['fecha_inicio_historico'] = fecha_inicio
                        config['tiendas'][tienda_id]['historico_completo'] = True
                        config['tiendas'][tienda_id]['verificado'] = True
                        config['tiendas'][tienda_id]['notas'] = f"L√≠mite hist√≥rico confirmado: {fecha_inicio}. Verificado autom√°ticamente {datetime.now().strftime('%Y-%m-%d')}"

        if cambios:
            print(f'  {YELLOW}Cambios propuestos en configuraci√≥n:{RESET}\n')
            for cambio in cambios:
                print(f"  ‚Ä¢ {cambio['tienda']}:")
                print(f"    Anterior: {cambio['fecha_anterior']}")
                print(f"    Nueva:    {cambio['fecha_nueva']}")

            respuesta = input(f'\n  {BOLD}¬øAplicar cambios a {CONFIG_PATH.name}? (s/n): {RESET}')

            if respuesta.lower() == 's':
                config['ultima_actualizacion'] = datetime.now().strftime('%Y-%m-%d')

                with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
                    json.dump(config, f, indent=2, ensure_ascii=False)

                print(f'\n  {GREEN}‚úì Configuraci√≥n actualizada exitosamente{RESET}')
            else:
                print(f'\n  {YELLOW}‚ö†Ô∏è  Cambios no aplicados{RESET}')
        else:
            print(f'  {GREEN}‚úì Configuraci√≥n ya est√° actualizada - no hay cambios necesarios{RESET}')

    print()

    # 6. Casos especiales - tiendas √∫nicas
    print(f'{BOLD}üìå CASOS ESPECIALES (verificaci√≥n manual){RESET}\n')

    for fecha_inicio, tiendas in sorted(grupos.items()):
        if len(tiendas) == 1:
            tienda = tiendas[0]
            fecha_max = fechas[tienda][1]
            print(f'  ‚Ä¢ {tienda}: {fecha_inicio} ‚Üí {fecha_max}')
            print(f'    Sugerencia: Ejecutar ETL en fechas anteriores para confirmar')
            print(f'    Comando: python3 etl/core/etl_ventas_historico.py --tiendas {tienda} --fecha-inicio 2024-06-01 --fecha-fin {fecha_inicio}')
            print()

if __name__ == '__main__':
    generar_reporte()
