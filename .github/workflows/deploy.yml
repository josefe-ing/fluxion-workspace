name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch: # Permite ejecutar manualmente desde GitHub UI

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Build y test del Backend
  backend-build:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8 (if available)
        continue-on-error: true
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests (if available)
        continue-on-error: true
        run: |
          pip install pytest
          pytest || echo "No tests found"

  # Job 2: Build y test del Frontend
  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npx eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 50

      - name: Type check
        run: npm run type-check

      - name: Build
        env:
          VITE_API_URL: https://d1tgnaj74tv17v.cloudfront.net
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 1

  # Job 3: Build and Push Backend Docker Image
  backend-docker:
    name: Build & Push Backend Docker Image
    needs: backend-build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Backend image to Amazon ECR
        working-directory: ./backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fluxion-backend
          IMAGE_TAG: latest
        run: |
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Backend image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push ETL image to Amazon ECR
        working-directory: ./etl
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fluxion-etl
          IMAGE_TAG: latest
        run: |
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "ETL image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  # Job 4: Deploy Infrastructure & Backend
  deploy-infrastructure:
    name: Deploy Infrastructure & Backend
    needs: [backend-docker, frontend-build]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: CDK Bootstrap (if needed)
        working-directory: ./infrastructure
        run: npx cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} || true

      - name: CDK Synth
        working-directory: ./infrastructure
        run: npx cdk synth

      - name: CDK Deploy
        working-directory: ./infrastructure
        run: npx cdk deploy --require-approval never

      - name: Force Backend Service Update
        run: |
          echo "Forcing ECS service to use new Docker image..."
          aws ecs update-service \
            --cluster fluxion-cluster \
            --service FluxionStackV2-FluxionBackendServiceE051E4B7-3D0YfNUbXnmp \
            --force-new-deployment \
            --query 'service.serviceName' \
            --output text

      - name: Wait for Backend Service to Stabilize
        run: |
          echo "Waiting for backend service to stabilize (max 5 minutes)..."
          aws ecs wait services-stable \
            --cluster fluxion-cluster \
            --services FluxionStackV2-FluxionBackendServiceE051E4B7-3D0YfNUbXnmp

      - name: Get Stack Outputs
        id: stack-outputs
        run: |
          BACKEND_URL=$(aws cloudformation describe-stacks \
            --stack-name FluxionStackV2 \
            --query 'Stacks[0].Outputs[?OutputKey==`BackendURL`].OutputValue' \
            --output text)
          FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name FluxionStackV2 \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucket`].OutputValue' \
            --output text)
          CLOUDFRONT_ID=$(aws cloudformation describe-stacks \
            --stack-name FluxionStackV2 \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text)

          echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "frontend-bucket=$FRONTEND_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront-id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT

    outputs:
      backend-url: ${{ steps.stack-outputs.outputs.backend-url }}
      frontend-bucket: ${{ steps.stack-outputs.outputs.frontend-bucket }}
      cloudfront-id: ${{ steps.stack-outputs.outputs.cloudfront-id }}

  # Job 5: Deploy Frontend to S3 + CloudFront
  deploy-frontend:
    name: Deploy Frontend
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Stack Outputs
        id: get-outputs
        run: |
          FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name FluxionStackV2 \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucket`].OutputValue' \
            --output text)
          CLOUDFRONT_ID=$(aws cloudformation describe-stacks \
            --stack-name FluxionStackV2 \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text)
          echo "frontend-bucket=$FRONTEND_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront-id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT

      - name: Upload to S3
        run: |
          aws s3 sync ./dist/ s3://${{ steps.get-outputs.outputs.frontend-bucket }}/ --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get-outputs.outputs.cloudfront-id }} \
            --paths "/*"

      - name: Deployment Summary
        run: |
          echo "‚úÖ Deployment Complete!"
          echo "Backend API: ${{ needs.deploy-infrastructure.outputs.backend-url }}"
          echo "Frontend: https://${{ needs.deploy-infrastructure.outputs.cloudfront-id }}.cloudfront.net"

  # Job 6: Health Check
  health-check:
    name: Health Check
    needs: [deploy-infrastructure, deploy-frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Check Backend Health
        run: |
          echo "Checking backend health..."
          sleep 30  # Wait for service to be fully ready

          # Retry health check up to 5 times
          max_retries=5
          retry_count=0

          while [ $retry_count -lt $max_retries ]; do
            if curl -f ${{ needs.deploy-infrastructure.outputs.backend-url }}; then
              echo "‚úÖ Backend is healthy!"
              exit 0
            fi

            retry_count=$((retry_count + 1))
            echo "Health check failed. Retry $retry_count/$max_retries..."
            sleep 10
          done

          echo "‚ùå Backend health check failed after $max_retries attempts"
          exit 1

      - name: Notify Success
        if: success()
        run: |
          echo "üéâ All services deployed and healthy!"
          echo "Backend: ${{ needs.deploy-infrastructure.outputs.backend-url }}"
